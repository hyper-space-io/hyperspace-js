/**
 * Vector Similarity Demo
 * The test functionality and Query testing
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@hyper-space.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AuthDto
 */
export interface AuthDto {
    /**
     *
     * @type {string}
     * @memberof AuthDto
     */
    'token'?: string;
}
/**
 *
 * @export
 * @interface DeleteByQueryRequest
 */
export interface DeleteByQueryRequest {
    /**
     * Specifies the documents to delete using the Query DSL.
     * @type {any}
     * @memberof DeleteByQueryRequest
     */
    'query'?: any;
}
/**
 *
 * @export
 * @interface DeleteByQueryResponse
 */
export interface DeleteByQueryResponse {
    /**
     * The number of milliseconds from start to end of the whole operation.
     * @type {number}
     * @memberof DeleteByQueryResponse
     */
    'took'?: number;
    /**
     * The number of documents that were successfully deleted.
     * @type {number}
     * @memberof DeleteByQueryResponse
     */
    'deleted'?: number;
}
/**
 *
 * @export
 * @interface Document
 */
export interface Document {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof Document
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     *
     * @type {string}
     * @memberof LoginDto
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof LoginDto
     */
    'password'?: string;
}
/**
 *
 * @export
 * @interface Script
 */
export interface Script {
    /**
     * A string with the contents of the script.
     * @type {string}
     * @memberof Script
     */
    'source': string;
    /**
     * Scripting language.
     * @type {string}
     * @memberof Script
     */
    'lang'?: string;
    /**
     * Parameters passed to the script.
     * @type {{ [key: string]: any; }}
     * @memberof Script
     */
    'params'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface StatusDto
 */
export interface StatusDto {
    /**
     * Short status text
     * @type {string}
     * @memberof StatusDto
     */
    'status'?: string;
    /**
     * Status code
     * @type {number}
     * @memberof StatusDto
     */
    'code'?: number;
    /**
     * Verbose message
     * @type {string}
     * @memberof StatusDto
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface UpdateByQuery
 */
export interface UpdateByQuery {
    /**
     *
     * @type {any}
     * @memberof UpdateByQuery
     */
    'query': any;
    /**
     *
     * @type {Script}
     * @memberof UpdateByQuery
     */
    'script': Script;
}
/**
 * HyperspaceApi - axios parameter creator
 * @export
 */
export declare const HyperspaceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a new batch to the collection
     * @param {string} collectionName
     * @param {Array<Document>} document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBatch: (collectionName: string, document: Array<Document>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add a new document to the collection
     * @param {string} collectionName
     * @param {Document} document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDocument: (collectionName: string, document: Document, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Clear all collection vectors
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearCollection: (collectionName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the information of all the collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsInfo: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Commit
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commit: (collectionName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new collection
     * @param {string} collectionName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection: (collectionName: string, body: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes documents that match the specified query.
     * @param {string} collectionName
     * @param {DeleteByQueryRequest} deleteByQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteByQuery: (collectionName: string, deleteByQueryRequest: DeleteByQueryRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection: (collectionName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete document by Id
     * @param {string} collectionName
     * @param {string} documentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDocument: (collectionName: string, documentId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete function by name
     * @param {string} collectionName
     * @param {string} functionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFunction: (collectionName: string, functionName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Find top X similar documents in the dataset using Elasticsearch DSL query
     * @param {string} collectionName
     * @param {number} size
     * @param {any} body
     * @param {string} [_options]
     * @param {boolean} [source] Indicates whether source fields are returned for matching documents.These fields are returned in the hits._source property of the search response.Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dslSearch: (collectionName: string, size: number, body: any, _options?: string, source?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Find document by Id
     * @param {string} collectionName
     * @param {string} documentId
     * @param {boolean} [metadataOnly]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDocument: (collectionName: string, documentId: string, metadataOnly?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Function
     * @param {string} collectionName
     * @param {string} functionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFunction: (collectionName: string, functionName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get schema of collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema: (collectionName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginDto: LoginDto, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Find top X similar documents in the dataset according to the selected search option.
     * @param {string} collectionName
     * @param {number} size
     * @param {Document} document
     * @param {string} [functionName]
     * @param {string} [_options]
     * @param {boolean} [source] Indicates whether source fields are returned for matching documents.These fields are returned in the hits._source property of the search response.Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search: (collectionName: string, size: number, document: Document, functionName?: string, _options?: string, source?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set Function
     * @param {string} collectionName
     * @param {string} functionName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFunction: (collectionName: string, functionName: string, body: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update documents that match a query using a script
     * @param {string} collectionName
     * @param {UpdateByQuery} updateByQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateByQuery: (collectionName: string, updateByQuery: UpdateByQuery, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update document by Id in the collection
     * @param {string} collectionName
     * @param {Document} document
     * @param {boolean} [partialUpdate]
     * @param {boolean} [docAsUpsert]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDocument: (collectionName: string, document: Document, partialUpdate?: boolean, docAsUpsert?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * HyperspaceApi - functional programming interface
 * @export
 */
export declare const HyperspaceApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a new batch to the collection
     * @param {string} collectionName
     * @param {Array<Document>} document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBatch(collectionName: string, document: Array<Document>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Add a new document to the collection
     * @param {string} collectionName
     * @param {Document} document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDocument(collectionName: string, document: Document, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Clear all collection vectors
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearCollection(collectionName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>>;
    /**
     *
     * @summary Get the information of all the collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Commit
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commit(collectionName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>>;
    /**
     *
     * @summary Create a new collection
     * @param {string} collectionName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(collectionName: string, body: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Deletes documents that match the specified query.
     * @param {string} collectionName
     * @param {DeleteByQueryRequest} deleteByQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteByQuery(collectionName: string, deleteByQueryRequest: DeleteByQueryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteByQueryResponse>>;
    /**
     *
     * @summary Delete a collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(collectionName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>>;
    /**
     *
     * @summary Delete document by Id
     * @param {string} collectionName
     * @param {string} documentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDocument(collectionName: string, documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>>;
    /**
     *
     * @summary Delete function by name
     * @param {string} collectionName
     * @param {string} functionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFunction(collectionName: string, functionName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>>;
    /**
     *
     * @summary Find top X similar documents in the dataset using Elasticsearch DSL query
     * @param {string} collectionName
     * @param {number} size
     * @param {any} body
     * @param {string} [_options]
     * @param {boolean} [source] Indicates whether source fields are returned for matching documents.These fields are returned in the hits._source property of the search response.Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dslSearch(collectionName: string, size: number, body: any, _options?: string, source?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Find document by Id
     * @param {string} collectionName
     * @param {string} documentId
     * @param {boolean} [metadataOnly]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDocument(collectionName: string, documentId: string, metadataOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get Function
     * @param {string} collectionName
     * @param {string} functionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFunction(collectionName: string, functionName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get schema of collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(collectionName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthDto>>;
    /**
     *
     * @summary Reset password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Find top X similar documents in the dataset according to the selected search option.
     * @param {string} collectionName
     * @param {number} size
     * @param {Document} document
     * @param {string} [functionName]
     * @param {string} [_options]
     * @param {boolean} [source] Indicates whether source fields are returned for matching documents.These fields are returned in the hits._source property of the search response.Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(collectionName: string, size: number, document: Document, functionName?: string, _options?: string, source?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Set Function
     * @param {string} collectionName
     * @param {string} functionName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFunction(collectionName: string, functionName: string, body: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDto>>;
    /**
     *
     * @summary Update documents that match a query using a script
     * @param {string} collectionName
     * @param {UpdateByQuery} updateByQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateByQuery(collectionName: string, updateByQuery: UpdateByQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Update document by Id in the collection
     * @param {string} collectionName
     * @param {Document} document
     * @param {boolean} [partialUpdate]
     * @param {boolean} [docAsUpsert]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDocument(collectionName: string, document: Document, partialUpdate?: boolean, docAsUpsert?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * HyperspaceApi - factory interface
 * @export
 */
export declare const HyperspaceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add a new batch to the collection
     * @param {string} collectionName
     * @param {Array<Document>} document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBatch(collectionName: string, document: Array<Document>, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Add a new document to the collection
     * @param {string} collectionName
     * @param {Document} document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDocument(collectionName: string, document: Document, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Clear all collection vectors
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clearCollection(collectionName: string, options?: any): AxiosPromise<StatusDto>;
    /**
     *
     * @summary Get the information of all the collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    collectionsInfo(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Commit
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commit(collectionName: string, options?: any): AxiosPromise<StatusDto>;
    /**
     *
     * @summary Create a new collection
     * @param {string} collectionName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(collectionName: string, body: any, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Deletes documents that match the specified query.
     * @param {string} collectionName
     * @param {DeleteByQueryRequest} deleteByQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteByQuery(collectionName: string, deleteByQueryRequest: DeleteByQueryRequest, options?: any): AxiosPromise<DeleteByQueryResponse>;
    /**
     *
     * @summary Delete a collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(collectionName: string, options?: any): AxiosPromise<StatusDto>;
    /**
     *
     * @summary Delete document by Id
     * @param {string} collectionName
     * @param {string} documentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDocument(collectionName: string, documentId: string, options?: any): AxiosPromise<StatusDto>;
    /**
     *
     * @summary Delete function by name
     * @param {string} collectionName
     * @param {string} functionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFunction(collectionName: string, functionName: string, options?: any): AxiosPromise<StatusDto>;
    /**
     *
     * @summary Find top X similar documents in the dataset using Elasticsearch DSL query
     * @param {string} collectionName
     * @param {number} size
     * @param {any} body
     * @param {string} [_options]
     * @param {boolean} [source] Indicates whether source fields are returned for matching documents.These fields are returned in the hits._source property of the search response.Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dslSearch(collectionName: string, size: number, body: any, _options?: string, source?: boolean, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Find document by Id
     * @param {string} collectionName
     * @param {string} documentId
     * @param {boolean} [metadataOnly]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDocument(collectionName: string, documentId: string, metadataOnly?: boolean, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get Function
     * @param {string} collectionName
     * @param {string} functionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFunction(collectionName: string, functionName: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get schema of collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(collectionName: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginDto: LoginDto, options?: any): AxiosPromise<AuthDto>;
    /**
     *
     * @summary Reset password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Find top X similar documents in the dataset according to the selected search option.
     * @param {string} collectionName
     * @param {number} size
     * @param {Document} document
     * @param {string} [functionName]
     * @param {string} [_options]
     * @param {boolean} [source] Indicates whether source fields are returned for matching documents.These fields are returned in the hits._source property of the search response.Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    search(collectionName: string, size: number, document: Document, functionName?: string, _options?: string, source?: boolean, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Set Function
     * @param {string} collectionName
     * @param {string} functionName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFunction(collectionName: string, functionName: string, body: any, options?: any): AxiosPromise<StatusDto>;
    /**
     *
     * @summary Update documents that match a query using a script
     * @param {string} collectionName
     * @param {UpdateByQuery} updateByQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateByQuery(collectionName: string, updateByQuery: UpdateByQuery, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Update document by Id in the collection
     * @param {string} collectionName
     * @param {Document} document
     * @param {boolean} [partialUpdate]
     * @param {boolean} [docAsUpsert]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDocument(collectionName: string, document: Document, partialUpdate?: boolean, docAsUpsert?: boolean, options?: any): AxiosPromise<any>;
};
/**
 * HyperspaceApi - object-oriented interface
 * @export
 * @class HyperspaceApi
 * @extends {BaseAPI}
 */
export declare class HyperspaceApi extends BaseAPI {
    /**
     *
     * @summary Add a new batch to the collection
     * @param {string} collectionName
     * @param {Array<Document>} document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    addBatch(collectionName: string, document: Array<Document>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Add a new document to the collection
     * @param {string} collectionName
     * @param {Document} document
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    addDocument(collectionName: string, document: Document, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Clear all collection vectors
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    clearCollection(collectionName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusDto, any>>;
    /**
     *
     * @summary Get the information of all the collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    collectionsInfo(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Commit
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    commit(collectionName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusDto, any>>;
    /**
     *
     * @summary Create a new collection
     * @param {string} collectionName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    createCollection(collectionName: string, body: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Deletes documents that match the specified query.
     * @param {string} collectionName
     * @param {DeleteByQueryRequest} deleteByQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    deleteByQuery(collectionName: string, deleteByQueryRequest: DeleteByQueryRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteByQueryResponse, any>>;
    /**
     *
     * @summary Delete a collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    deleteCollection(collectionName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusDto, any>>;
    /**
     *
     * @summary Delete document by Id
     * @param {string} collectionName
     * @param {string} documentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    deleteDocument(collectionName: string, documentId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusDto, any>>;
    /**
     *
     * @summary Delete function by name
     * @param {string} collectionName
     * @param {string} functionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    deleteFunction(collectionName: string, functionName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusDto, any>>;
    /**
     *
     * @summary Find top X similar documents in the dataset using Elasticsearch DSL query
     * @param {string} collectionName
     * @param {number} size
     * @param {any} body
     * @param {string} [_options]
     * @param {boolean} [source] Indicates whether source fields are returned for matching documents.These fields are returned in the hits._source property of the search response.Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    dslSearch(collectionName: string, size: number, body: any, _options?: string, source?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Find document by Id
     * @param {string} collectionName
     * @param {string} documentId
     * @param {boolean} [metadataOnly]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    getDocument(collectionName: string, documentId: string, metadataOnly?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get Function
     * @param {string} collectionName
     * @param {string} functionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    getFunction(collectionName: string, functionName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get schema of collection
     * @param {string} collectionName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    getSchema(collectionName: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    login(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthDto, any>>;
    /**
     *
     * @summary Reset password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    resetPassword(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Find top X similar documents in the dataset according to the selected search option.
     * @param {string} collectionName
     * @param {number} size
     * @param {Document} document
     * @param {string} [functionName]
     * @param {string} [_options]
     * @param {boolean} [source] Indicates whether source fields are returned for matching documents.These fields are returned in the hits._source property of the search response.Defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    search(collectionName: string, size: number, document: Document, functionName?: string, _options?: string, source?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Set Function
     * @param {string} collectionName
     * @param {string} functionName
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    setFunction(collectionName: string, functionName: string, body: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusDto, any>>;
    /**
     *
     * @summary Update documents that match a query using a script
     * @param {string} collectionName
     * @param {UpdateByQuery} updateByQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    updateByQuery(collectionName: string, updateByQuery: UpdateByQuery, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Update document by Id in the collection
     * @param {string} collectionName
     * @param {Document} document
     * @param {boolean} [partialUpdate]
     * @param {boolean} [docAsUpsert]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HyperspaceApi
     */
    updateDocument(collectionName: string, document: Document, partialUpdate?: boolean, docAsUpsert?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
